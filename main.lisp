(load "~/quicklisp/setup.lisp")
(ql:quickload :cffi)
(load "engine/video.lisp")
(load "engine/state.lisp")
(load "rooms.lisp")

(defconstant +key-left+ #x34)
(defconstant +key-right+ #x36)
(defparameter *player* nil)

(state:state menu
       ((with-open-file (in "tiles" :direction :input :element-type 'unsigned-byte)
	  (dotimes (i 2000)
	    (setf (aref video:*tiles* i) (read-byte in))))
	(with-open-file (in "colors" :direction :input :element-type 'unsigned-byte)
	  (dotimes (i 1000)
	    (setf (aref video:*colors* i) (read-byte in))))
	(with-open-file (in "sprites" :direction :input :element-type 'unsigned-byte)
	  (dotimes (i (* 64 80))
	    (setf (aref video:*sprites-data* i) (read-byte in))))
	(setf (aref video:*sprites* 1) (video:make-sprite :x 150 :y 130 :num 17 :color 9 :collision nil :multi nil))
	(setf (aref video:*sprites* 0) (video:make-sprite :x 169 :y 113 :num 0 :color 10 :collision t :multi t))
	(setf *player* (aref video:*sprites* 0))
	(setf video:*back-multi-color* 9)
	(setf video:*back-multi-color2* 8)
	(setf video:*sprite-color1* 7)
	(setf video:*sprite-color2* 2)
	(room-1-1))
	     
       ((let ((x (video:sprite-x *player*)))
	  (when (= (video:get-key +key-left+) 1)
	    (setf (video:sprite-x *player*) (- x 2)))
	  (when (= (video:get-key +key-right+) 1)
	    (setf (video:sprite-x *player*) (+ x 2))))
	(when (= (video:get-key 32) 1)
	  (state:activate 'game))
	(sleep 0.03)))

(state:state game ((dotimes (i 1000)
		     (setf (aref video:*screen* i) 0)))
	     ((let ((x (video:sprite-x *player*))
		    (y (video:sprite-x *player*)))
		(setf (video:sprite-x *player*) (+ x (- (random 6) 3)))
		(setf (video:sprite-y *player*) (+ y (- (random 6) 3)))
		(sleep 0.1))))

(defun main()
  (state:activate 'menu)
  (video:run 2)
  (state:destroy))

(main)
(video:video-close)
(video:close-lib)
